#line 2 "/home/gurumurt/projects/CoGaDB/Hawk-VLDBJ/source/src/sql/server/sql_scanner.cpp"

#line 4 "/home/gurumurt/projects/CoGaDB/Hawk-VLDBJ/source/src/sql/server/sql_scanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define cogadb_sql_scanner__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer cogadb_sql_scanner__create_buffer
#endif

#ifdef yy_delete_buffer
#define cogadb_sql_scanner__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer cogadb_sql_scanner__delete_buffer
#endif

#ifdef yy_scan_buffer
#define cogadb_sql_scanner__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer cogadb_sql_scanner__scan_buffer
#endif

#ifdef yy_scan_string
#define cogadb_sql_scanner__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string cogadb_sql_scanner__scan_string
#endif

#ifdef yy_scan_bytes
#define cogadb_sql_scanner__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes cogadb_sql_scanner__scan_bytes
#endif

#ifdef yy_init_buffer
#define cogadb_sql_scanner__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer cogadb_sql_scanner__init_buffer
#endif

#ifdef yy_flush_buffer
#define cogadb_sql_scanner__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer cogadb_sql_scanner__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define cogadb_sql_scanner__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state cogadb_sql_scanner__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define cogadb_sql_scanner__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer cogadb_sql_scanner__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define cogadb_sql_scanner_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state cogadb_sql_scanner_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define cogadb_sql_scanner_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state cogadb_sql_scanner_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define cogadb_sql_scanner_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack cogadb_sql_scanner_ensure_buffer_stack
#endif

#ifdef yylex
#define cogadb_sql_scanner_lex_ALREADY_DEFINED
#else
#define yylex cogadb_sql_scanner_lex
#endif

#ifdef yyrestart
#define cogadb_sql_scanner_restart_ALREADY_DEFINED
#else
#define yyrestart cogadb_sql_scanner_restart
#endif

#ifdef yylex_init
#define cogadb_sql_scanner_lex_init_ALREADY_DEFINED
#else
#define yylex_init cogadb_sql_scanner_lex_init
#endif

#ifdef yylex_init_extra
#define cogadb_sql_scanner_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra cogadb_sql_scanner_lex_init_extra
#endif

#ifdef yylex_destroy
#define cogadb_sql_scanner_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy cogadb_sql_scanner_lex_destroy
#endif

#ifdef yyget_debug
#define cogadb_sql_scanner_get_debug_ALREADY_DEFINED
#else
#define yyget_debug cogadb_sql_scanner_get_debug
#endif

#ifdef yyset_debug
#define cogadb_sql_scanner_set_debug_ALREADY_DEFINED
#else
#define yyset_debug cogadb_sql_scanner_set_debug
#endif

#ifdef yyget_extra
#define cogadb_sql_scanner_get_extra_ALREADY_DEFINED
#else
#define yyget_extra cogadb_sql_scanner_get_extra
#endif

#ifdef yyset_extra
#define cogadb_sql_scanner_set_extra_ALREADY_DEFINED
#else
#define yyset_extra cogadb_sql_scanner_set_extra
#endif

#ifdef yyget_in
#define cogadb_sql_scanner_get_in_ALREADY_DEFINED
#else
#define yyget_in cogadb_sql_scanner_get_in
#endif

#ifdef yyset_in
#define cogadb_sql_scanner_set_in_ALREADY_DEFINED
#else
#define yyset_in cogadb_sql_scanner_set_in
#endif

#ifdef yyget_out
#define cogadb_sql_scanner_get_out_ALREADY_DEFINED
#else
#define yyget_out cogadb_sql_scanner_get_out
#endif

#ifdef yyset_out
#define cogadb_sql_scanner_set_out_ALREADY_DEFINED
#else
#define yyset_out cogadb_sql_scanner_set_out
#endif

#ifdef yyget_leng
#define cogadb_sql_scanner_get_leng_ALREADY_DEFINED
#else
#define yyget_leng cogadb_sql_scanner_get_leng
#endif

#ifdef yyget_text
#define cogadb_sql_scanner_get_text_ALREADY_DEFINED
#else
#define yyget_text cogadb_sql_scanner_get_text
#endif

#ifdef yyget_lineno
#define cogadb_sql_scanner_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno cogadb_sql_scanner_get_lineno
#endif

#ifdef yyset_lineno
#define cogadb_sql_scanner_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno cogadb_sql_scanner_set_lineno
#endif

#ifdef yyget_column
#define cogadb_sql_scanner_get_column_ALREADY_DEFINED
#else
#define yyget_column cogadb_sql_scanner_get_column
#endif

#ifdef yyset_column
#define cogadb_sql_scanner_set_column_ALREADY_DEFINED
#else
#define yyset_column cogadb_sql_scanner_set_column
#endif

#ifdef yywrap
#define cogadb_sql_scanner_wrap_ALREADY_DEFINED
#else
#define yywrap cogadb_sql_scanner_wrap
#endif

#ifdef yyget_lval
#define cogadb_sql_scanner_get_lval_ALREADY_DEFINED
#else
#define yyget_lval cogadb_sql_scanner_get_lval
#endif

#ifdef yyset_lval
#define cogadb_sql_scanner_set_lval_ALREADY_DEFINED
#else
#define yyset_lval cogadb_sql_scanner_set_lval
#endif

#ifdef yyalloc
#define cogadb_sql_scanner_alloc_ALREADY_DEFINED
#else
#define yyalloc cogadb_sql_scanner_alloc
#endif

#ifdef yyrealloc
#define cogadb_sql_scanner_realloc_ALREADY_DEFINED
#else
#define yyrealloc cogadb_sql_scanner_realloc
#endif

#ifdef yyfree
#define cogadb_sql_scanner_free_ALREADY_DEFINED
#else
#define yyfree cogadb_sql_scanner_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define cogadb_sql_scanner_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyg->yytext_ptr -= yyg->yy_more_len; \
	yyleng = (int) (yy_cp - yyg->yytext_ptr); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 125
#define YY_END_OF_BUFFER 126
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[509] =
    {   0,
        0,    0,  126,  125,  123,  125,  125,  111,  111,  111,
      115,  107,  105,  108,  112,  112,   20,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  123,    0,  114,
      113,    0,  122,  121,    0,  117,    0,  116,  115,    0,
      109,  106,  110,  112,  112,  112,  112,   14,  112,  112,
      112,  112,   19,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,   52,   58,  112,  112,  112,  112,  112,  112,
      112,  112,  112,   68,   69,  112,   72,  112,  112,  112,

      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
       91,  112,  112,  112,  112,  112,  112,  112,  112,    0,
      124,    0,  120,  116,    0,    0,  118,    1,    2,    3,
       13,   15,  112,    4,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,   43,  112,  112,
      112,    0,  112,  112,  112,  112,  112,  112,  112,   56,
      112,  112,   60,  112,  112,  112,    6,    5,  112,   65,
      112,  112,  112,  112,  112,  112,   75,  112,  112,  112,
      112,  112,  112,  112,  112,  112,   86,  112,  112,  112,

        7,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,    0,  119,  112,  112,  112,  112,   21,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
       31,  112,  112,  112,  112,   36,  112,  112,  112,  112,
      112,  112,  112,  112,  112,   47,  112,    0,   48,  112,
      112,  112,  112,  112,  112,  112,   57,  112,   59,  112,
       62,  112,  112,   66,  112,   70,  112,  112,  112,  112,
      112,  112,  112,  112,   81,  112,  112,  112,  112,  112,
       88,  112,  112,  112,  112,  112,  112,   96,  112,  112,
      100,  112,  112,  103,  104,  112,  112,  112,  112,    0,

      112,   22,   23,   24,  112,  112,  112,    8,  112,   28,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,   41,   42,  112,  112,   46,  112,   48,   49,   50,
      112,  112,   54,  112,  112,  112,  112,   63,  112,  112,
      112,   73,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,   90,   92,  112,  112,  112,  112,
      112,  112,  102,  112,  112,  112,   18,    0,  112,   25,
      112,  112,   27,  112,   30,  112,  112,  112,   35,  112,
      112,   38,   39,   40,  112,  112,  112,   51,  112,   55,
      112,  112,  112,   64,  112,   71,   74,  112,  112,  112,

      112,   80,  112,  112,   84,   85,  112,  112,   93,  112,
       95,   97,  112,  112,  112,  112,   17,    0,  112,  112,
      112,   29,   32,   33,   34,  112,  112,   44,   45,  112,
      112,   56,  112,  112,   67,  112,   77,  112,  112,  112,
      112,  112,   89,  112,   99,  112,  112,  112,    0,  112,
      112,   26,  112,   37,    9,  112,  112,   61,  112,  112,
      112,  112,   83,   87,   94,  101,   15,  112,    0,   21,
      112,  112,  112,   53,  112,   76,  112,   79,  112,  112,
        0,  112,   36,  112,  112,   78,   82,  112,    0,  112,
      112,  112,  112,   98,   10,  112,  112,   16,  112,  112,

      112,   11,  112,  112,  112,  112,   12,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    1,    1,    1,    1,    6,    7,
        7,    7,    8,    7,    9,   10,    7,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,    7,    7,   12,
       13,   14,    1,    1,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
        1,    1,    1,    1,   41,    1,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[68] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    1,    1,    1,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2
    } ;

static const flex_int16_t yy_base[513] =
    {   0,
        0,    0,  267, 1028,   66,   68,   69, 1028,  250,   63,
       66,   65, 1028,  195,   95,   61,   73,   68,   55,  115,
       87,   75,  109,   69,  117,  130,  136,  125,  147,  158,
        0,  120,  204,  141,  177,  176,  166,  210,   89, 1028,
     1028,   83, 1028, 1028,  200,  190,  216,  219,  230,  234,
     1028, 1028, 1028,    0,  204,  202,  229,  212,  210,  230,
      218,  232,    0,  242,  225,  259,  244,  232,  235,  272,
      237,  237,  260,  259,  249,  256,  271,  264,  273,  305,
      293,  275,  308,  157,  294,  279,  295,  302,  286,  303,
      316,  303,  320,    0,    0,  321,  325,  315,  329,  357,

      341,  345,  336,  349,  351,  357,  351,  355,  356,  372,
        0,  367,  373,  374,  369,  375,  377,  363,  370,  193,
     1028,  174,  171,  395,  422,  151,  141,    0,    0,    0,
        0,  390,  389,    0,  379,  396,  393,  409,  399,  405,
      408,  420,  411,  425,  409,  412,  428,  425,  434,  431,
      438,  422,  441,  443,  427,  446,  450,  454,  440,  443,
      450,  478,  457,  461,  456,  470,  471,  477,  479,  480,
      479,  474,    0,  482,  485,  482,    0,    0,  472,    0,
      482,  491,  483,  491,  498,  502,    0,  505,  497,  510,
      514,  516,  524,  519,  528,  529,    0,  524,  533,  536,

        0,  529,  527,  534,  544,  529,  527,  546,  527,  564,
      544,  543,  127,   93,  543,  544,  557,  550,  579,  562,
      578,  573,  578,  587,  581,  572,  573,  575,  590,  581,
        0,  584,  597,  578,  581,  597,  594,  592,  590,  588,
      603,  593,  607,  600,  623,    0,  612,  619,    0,  616,
      621,  625,  638,  624,  626,  639,    0,  632,    0,  627,
        0,  629,  638,    0,  633,    0,  637,  635,  654,  647,
      656,  649,  655,  653,    0,  647,  665,  657,  669,  669,
        0,  671,  683,  676,  670,  686,  675,    0,  691,  690,
        0,  695,  696,    0,    0,  698,  685,  699,  685,  718,

      704,    0,    0,    0,  689,  690,  697,    0,  707,    0,
      700,  698,  718,  703,  712,  721,  719,  721,  737,  739,
      726,    0,    0,  740,  748,    0,  725, 1028,    0,    0,
      745,  753,    0,  735,  751,  744,  757,    0,  754,  752,
      749,    0,  752,  746,  748,  756,  766,  770,  770,  777,
      779,  767,  780,  790,    0,    0,  791,  784,  794,  782,
      802,  782,    0,  797,  799,  795,    0,  809,  791,    0,
       62,  791,    0,  793,    0,  803,  812,  798,    0,  815,
      817,    0,    0,    0,  808,  810,  811,    0,  809,    0,
      814,  819,  834,    0,  840,    0,    0,  839,  825,  847,

      832,    0,  841,  854,    0,    0,  844,  855,    0,  857,
        0,    0,  845,  859,  851,  840,    0,  849,  864,  869,
      867,    0,    0,    0,    0,  864,  854,    0,    0,  871,
      863,    0,  865,  878,    0,  871,    0,  881,  877,  894,
      891,  884,    0,  902,    0,  889,  902,  910,  887,  896,
      915,    0,  903,    0,   60,  900,  904,    0,  906,  916,
      918,  920,    0,    0,    0,    0,    0,  906,  918,   94,
      909,  923,  913,    0,  923,    0,  918,    0,  921,  933,
      935,  946,    0,  936,  933,    0,    0,  945,  954,  944,
      964,  953,  954, 1028,    0,  950,  966,    0,  963,  955,

      955,    0,  955,  968,  976,  961,    0, 1028, 1021, 1023,
       79, 1025
    } ;

static const flex_int16_t yy_def[513] =
    {   0,
      508,    1,  508,  508,  508,  509,  510,  508,  508,  508,
      508,  508,  508,  508,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  508,  509,  508,
      508,  510,  508,  508,  512,  508,  508,  508,  508,  508,
      508,  508,  508,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,

      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  512,
      508,  508,  508,  508,  508,  508,  508,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  508,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,

      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  508,  508,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  508,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  508,

      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  508,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  508,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,

      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  508,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  508,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  508,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      508,  511,  511,  511,  511,  511,  511,  511,  508,  511,
      511,  511,  511,  508,  511,  511,  511,  511,  511,  511,

      511,  511,  511,  511,  511,  511,  511,    0,  508,  508,
      508,  508
    } ;

static const flex_int16_t yy_nxt[1096] =
    {   0,
        4,    5,    5,    5,    6,    7,    8,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   31,   31,   31,
        4,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   31,   31,   31,   38,   38,   38,
       40,   43,   41,   46,   44,   48,   49,   51,   52,   61,
       54,   47,   69,   62,   50,   43,   70,   73,   44,   82,
       71,   40,   74,   41,   64,  300,   72,   85,   65,   63,

      473,   66,  420,  214,   67,   79,   61,   68,   47,   69,
       62,   50,   55,   70,   73,   80,   82,   71,   81,   74,
       56,   64,   57,   72,   85,   65,   63,   58,   66,   59,
       60,   67,   79,   75,   68,   86,   83,  214,  102,   55,
       76,   84,   80,   77,   87,   81,   78,   56,  103,   57,
       89,  127,   88,   92,   58,  110,   59,   60,   90,   93,
       75,  127,   86,   83,   91,  102,   94,   76,   84,  111,
       77,   87,   98,   78,   95,  103,   96,   89,   97,   88,
       92,  123,  110,   99,  123,   90,   93,  117,  118,  100,
      115,   91,  101,   94,  119,  121,  111,  171,  116,   98,

       46,   95,  121,   96,  112,   97,  113,   53,   47,  114,
       99,   38,   38,   38,  117,  118,  100,  115,  128,  101,
      104,  119,  105,  122,  122,  116,  123,  129,  132,  124,
      106,  112,  107,  113,  108,   47,  114,  125,  109,   48,
       49,  126,  126,  133,  127,  128,  130,  104,   50,  105,
      134,  135,  136,  139,  129,  132,  137,  106,   45,  107,
      138,  108,  144,  146,  125,  109,  508,  131,  147,  152,
      133,  153,  145,  130,  140,   50,  154,  134,  135,  136,
      139,  155,  156,  137,  157,  141,  142,  138,  148,  144,
      146,  149,  160,  143,  131,  147,  152,  150,  153,  145,

      161,  140,  158,  154,  151,  159,  162,  164,  155,  156,
      166,  157,  141,  142,  508,  148,  172,  173,  149,  160,
      143,  165,  174,  177,  150,  167,  175,  161,  176,  158,
      178,  151,  159,  179,  164,  168,  180,  166,  163,  183,
      169,  170,  185,  172,  173,  181,  182,  186,  165,  174,
      177,  187,  167,  175,  184,  176,  191,  178,  508,  192,
      179,  194,  168,  180,  193,  163,  183,  169,  170,  185,
      195,  198,  181,  182,  186,  188,  196,  199,  187,  189,
      200,  184,  201,  191,  197,  190,  192,  202,  194,  203,
      205,  193,  206,  209,  207,  210,  211,  195,  198,  204,

      208,  212,  188,  196,  199,  124,  189,  200,  215,  201,
      216,  197,  190,  125,  202,  217,  203,  205,  218,  206,
      209,  207,  210,  211,  219,  220,  204,  208,  212,  213,
      213,  221,  214,  222,  223,  215,  224,  216,  226,  227,
      125,  228,  217,  229,  230,  218,  231,  232,  234,  235,
      233,  219,  220,  225,  236,  237,  238,  239,  221,  240,
      222,  223,  241,  224,  242,  226,  227,  245,  228,  246,
      229,  230,  243,  231,  232,  234,  235,  233,  247,  162,
      225,  236,  237,  238,  239,  249,  240,  244,  250,  241,
      251,  242,  252,  253,  245,  254,  246,  255,  256,  243,

      258,  259,  260,  261,  262,  247,  263,  264,  257,  265,
      266,  248,  249,  267,  244,  250,  268,  251,  269,  252,
      253,  270,  254,  271,  255,  256,  273,  258,  259,  260,
      261,  262,  272,  263,  264,  257,  265,  266,  248,  274,
      267,  275,  276,  268,  277,  269,  278,  279,  270,  280,
      271,  281,  282,  273,  283,  284,  286,  285,  287,  272,
      288,  289,  290,  291,  508,  294,  274,  295,  275,  276,
      296,  277,  297,  278,  279,  298,  280,  299,  281,  282,
      300,  283,  284,  286,  285,  287,  302,  288,  289,  290,
      291,  292,  294,  301,  295,  293,  303,  296,  304,  297,

      305,  306,  298,  307,  299,  308,  309,  310,  311,  312,
      313,  314,  315,  302,  316,  317,  318,  319,  292,  320,
      301,  321,  293,  303,  322,  304,  323,  305,  306,  324,
      307,  325,  308,  309,  310,  311,  312,  313,  314,  315,
      326,  316,  317,  318,  319,  327,  320,  328,  321,  329,
      330,  322,  331,  323,  332,  333,  324,  334,  325,  335,
      336,  337,  338,  339,  340,  341,  342,  326,  343,  344,
      345,  346,  327,  347,  328,  348,  329,  330,  349,  331,
      350,  332,  333,  351,  334,  352,  335,  336,  337,  338,
      339,  340,  341,  342,  353,  343,  344,  345,  346,  354,

      347,  355,  348,  356,  357,  349,  358,  350,  359,  360,
      351,  361,  352,  362,  363,  364,  365,  366,  367,  300,
      369,  353,  370,  371,  372,  373,  354,  374,  355,  375,
      356,  357,  376,  358,  377,  359,  360,  378,  361,  379,
      362,  363,  364,  365,  366,  367,  380,  369,  381,  370,
      371,  372,  373,  368,  374,  382,  375,  383,  384,  376,
      385,  377,  386,  387,  378,  388,  379,  389,  390,  391,
      392,  393,  394,  380,  395,  381,  396,  397,  398,  399,
      368,  400,  382,  401,  383,  384,  402,  385,  403,  386,
      387,  404,  388,  405,  389,  390,  391,  392,  393,  394,

      406,  395,  407,  396,  397,  398,  399,  408,  400,  409,
      401,  410,  411,  402,  412,  403,  413,  414,  404,  415,
      405,  416,  417,  418,  419,  421,  422,  406,  423,  407,
      424,  425,  426,  427,  408,  428,  409,  429,  410,  411,
      430,  412,  431,  413,  414,  432,  415,  433,  416,  417,
      418,  419,  421,  422,  434,  423,  435,  424,  425,  426,
      427,  436,  428,  437,  429,  438,  439,  430,  440,  431,
      441,  442,  432,  443,  433,  444,  445,  446,  447,  448,
      449,  434,  450,  435,  451,  452,  453,  454,  436,  455,
      437,  456,  438,  439,  457,  440,  458,  441,  442,  459,

      443,  460,  444,  445,  446,  447,  448,  449,  461,  450,
      462,  451,  452,  453,  454,  463,  455,  464,  456,  465,
      466,  457,  467,  458,  468,  469,  459,  470,  460,  471,
      472,  474,  475,  476,  477,  461,  478,  462,  479,  480,
      481,  482,  463,  483,  464,  484,  465,  466,  485,  467,
      486,  468,  469,  487,  470,  488,  471,  472,  474,  475,
      476,  477,  489,  478,  490,  479,  480,  481,  482,  491,
      483,  492,  484,  493,  494,  485,  495,  486,  496,  497,
      487,  498,  488,  499,  500,  501,  502,  503,  504,  489,
      505,  490,  506,  507,  508,  508,  491,  508,  492,  508,

      493,  494,  508,  495,  508,  496,  497,  508,  498,  508,
      499,  500,  501,  502,  503,  504,  508,  505,  508,  506,
      507,   39,   39,   42,   42,  120,  120,    3,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508

    } ;

static const flex_int16_t yy_chk[1096] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    5,    5,
        6,    7,    6,   10,    7,   11,   11,   12,   12,   16,
      511,   10,   18,   16,   11,   42,   18,   19,   42,   22,
       18,   39,   19,   39,   17,  470,   18,   24,   17,   16,

      455,   17,  371,  214,   17,   21,   16,   17,   10,   18,
       16,   11,   15,   18,   19,   21,   22,   18,   21,   19,
       15,   17,   15,   18,   24,   17,   16,   15,   17,   15,
       15,   17,   21,   20,   17,   25,   23,  213,   32,   15,
       20,   23,   21,   20,   26,   21,   20,   15,   32,   15,
       27,  127,   26,   28,   15,   34,   15,   15,   27,   28,
       20,  126,   25,   23,   27,   32,   29,   20,   23,   34,
       20,   26,   30,   20,   29,   32,   29,   27,   29,   26,
       28,  123,   34,   30,  122,   27,   28,   37,   37,   30,
       36,   27,   30,   29,   37,  120,   34,   84,   36,   30,

       46,   29,   45,   29,   35,   29,   35,   14,   46,   35,
       30,   38,   38,   38,   37,   37,   30,   36,   55,   30,
       33,   37,   33,   47,   47,   36,   47,   56,   58,   48,
       33,   35,   33,   35,   33,   46,   35,   48,   33,   49,
       49,   50,   50,   59,   50,   55,   57,   33,   49,   33,
       60,   61,   62,   65,   56,   58,   64,   33,    9,   33,
       64,   33,   67,   68,   48,   33,    3,   57,   69,   71,
       59,   72,   67,   57,   66,   49,   73,   60,   61,   62,
       65,   74,   75,   64,   76,   66,   66,   64,   70,   67,
       68,   70,   78,   66,   57,   69,   71,   70,   72,   67,

       79,   66,   77,   73,   70,   77,   80,   81,   74,   75,
       82,   76,   66,   66,    0,   70,   85,   86,   70,   78,
       66,   81,   87,   89,   70,   83,   88,   79,   88,   77,
       90,   70,   77,   91,   81,   83,   92,   82,   80,   96,
       83,   83,   97,   85,   86,   93,   93,   98,   81,   87,
       89,   99,   83,   88,   96,   88,  101,   90,    0,  102,
       91,  103,   83,   92,  102,   80,   96,   83,   83,   97,
      104,  106,   93,   93,   98,  100,  105,  107,   99,  100,
      108,   96,  109,  101,  105,  100,  102,  110,  103,  112,
      113,  102,  114,  116,  115,  117,  118,  104,  106,  112,

      115,  119,  100,  105,  107,  124,  100,  108,  132,  109,
      133,  105,  100,  124,  110,  135,  112,  113,  136,  114,
      116,  115,  117,  118,  137,  138,  112,  115,  119,  125,
      125,  139,  125,  140,  141,  132,  142,  133,  143,  144,
      124,  145,  135,  146,  146,  136,  147,  148,  149,  150,
      148,  137,  138,  142,  151,  152,  153,  154,  139,  155,
      140,  141,  156,  142,  157,  143,  144,  159,  145,  160,
      146,  146,  158,  147,  148,  149,  150,  148,  161,  162,
      142,  151,  152,  153,  154,  163,  155,  158,  164,  156,
      165,  157,  166,  167,  159,  168,  160,  169,  170,  158,

      171,  172,  174,  175,  176,  161,  179,  181,  170,  182,
      183,  162,  163,  184,  158,  164,  185,  165,  186,  166,
      167,  188,  168,  189,  169,  170,  190,  171,  172,  174,
      175,  176,  189,  179,  181,  170,  182,  183,  162,  191,
      184,  192,  193,  185,  194,  186,  195,  196,  188,  198,
      189,  199,  200,  190,  202,  203,  204,  203,  205,  189,
      206,  207,  208,  209,    0,  211,  191,  212,  192,  193,
      215,  194,  216,  195,  196,  217,  198,  218,  199,  200,
      219,  202,  203,  204,  203,  205,  220,  206,  207,  208,
      209,  210,  211,  219,  212,  210,  221,  215,  222,  216,

      223,  224,  217,  225,  218,  226,  227,  228,  229,  230,
      232,  233,  234,  220,  235,  236,  237,  238,  210,  239,
      219,  240,  210,  221,  241,  222,  242,  223,  224,  243,
      225,  244,  226,  227,  228,  229,  230,  232,  233,  234,
      245,  235,  236,  237,  238,  247,  239,  248,  240,  250,
      251,  241,  252,  242,  253,  254,  243,  255,  244,  256,
      258,  260,  262,  263,  265,  267,  268,  245,  269,  270,
      271,  272,  247,  273,  248,  274,  250,  251,  276,  252,
      277,  253,  254,  278,  255,  279,  256,  258,  260,  262,
      263,  265,  267,  268,  280,  269,  270,  271,  272,  282,

      273,  283,  274,  284,  285,  276,  286,  277,  287,  289,
      278,  290,  279,  292,  293,  296,  297,  298,  299,  300,
      301,  280,  305,  306,  307,  309,  282,  311,  283,  312,
      284,  285,  313,  286,  314,  287,  289,  315,  290,  316,
      292,  293,  296,  297,  298,  299,  317,  301,  318,  305,
      306,  307,  309,  300,  311,  319,  312,  320,  321,  313,
      324,  314,  325,  327,  315,  331,  316,  332,  334,  335,
      336,  337,  339,  317,  340,  318,  341,  343,  344,  345,
      300,  346,  319,  347,  320,  321,  348,  324,  349,  325,
      327,  350,  331,  351,  332,  334,  335,  336,  337,  339,

      352,  340,  353,  341,  343,  344,  345,  354,  346,  357,
      347,  358,  359,  348,  360,  349,  361,  362,  350,  364,
      351,  365,  366,  368,  369,  372,  374,  352,  376,  353,
      377,  378,  380,  381,  354,  385,  357,  386,  358,  359,
      387,  360,  389,  361,  362,  391,  364,  392,  365,  366,
      368,  369,  372,  374,  393,  376,  395,  377,  378,  380,
      381,  398,  385,  399,  386,  400,  401,  387,  403,  389,
      404,  407,  391,  408,  392,  410,  413,  414,  415,  416,
      418,  393,  419,  395,  420,  421,  426,  427,  398,  430,
      399,  431,  400,  401,  433,  403,  434,  404,  407,  436,

      408,  438,  410,  413,  414,  415,  416,  418,  439,  419,
      440,  420,  421,  426,  427,  441,  430,  442,  431,  444,
      446,  433,  447,  434,  448,  449,  436,  450,  438,  451,
      453,  456,  457,  459,  460,  439,  461,  440,  462,  468,
      469,  471,  441,  472,  442,  473,  444,  446,  475,  447,
      477,  448,  449,  479,  450,  480,  451,  453,  456,  457,
      459,  460,  481,  461,  482,  462,  468,  469,  471,  484,
      472,  485,  473,  488,  489,  475,  490,  477,  491,  492,
      479,  493,  480,  496,  497,  499,  500,  501,  503,  481,
      504,  482,  505,  506,    0,    0,  484,    0,  485,    0,

      488,  489,    0,  490,    0,  491,  492,    0,  493,    0,
      496,  497,  499,  500,  501,  503,    0,  504,    0,  505,
      506,  509,  509,  510,  510,  512,  512,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508

    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[126] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() (yyg->yy_more_flag = 1)
#define YY_MORE_ADJ yyg->yy_more_len
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lib/cogadb/src/sql/server/sql_scanner.lpp"
/*
 * Copyright (c) 2013, Robin Haberkorn, Otto-von-Guericke University of Magdeburg, Germany. All rights reserved.
 * Derived from Example 5-3, lex & yacc by John R. Levine, Tony Mason and Doug Brown.
 *		Copyright 1990, 1992 O'Reilly & Associates, Inc.
 *
 * This program and accompanying materials are made available under the terms of the 
 * GNU GENERAL PUBLIC LICENSE - Version 3, http://www.gnu.org/licenses/gpl-3.0.txt
 */
#line 11 "lib/cogadb/src/sql/server/sql_scanner.lpp"
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-value"
#pragma GCC diagnostic ignored "-Wsign-compare"
#include <iostream>
#include <string>
#include <stdlib.h>

#include <boost/algorithm/string.hpp>

/*
 * generated from sql_parser.ypp,
 * contains tokens definitions
 */
#include "sql_parser.hpp"
#include "sql/server/sql_driver.hpp"
#include "sql/server/sql_parsetree.hpp"

using namespace CoGaDB::SQL;

#define TOK(NAME) do {		\
	return Parser::token::NAME;	\
} while (0)

/*
 * By default yylex returns int, we use token_type.
 * Unfortunately yyterminate by default returns 0, which is
 * not of token_type.
 */
#define yyterminate() TOK(END)

#define driver (*yyextra)

typedef Parser::semantic_type YYSTYPE;
/*
 * put lex() definition into CoGaDB::SQL::Scanner namespace,
 * all other declarations/definitions must be prefixed
 */
#define YY_DECL \
	CoGaDB::SQL::Parser::token_type \
	CoGaDB::SQL::Scanner::lex(YYSTYPE *yylval_param, yyscan_t yyscanner)

/*
 * Let YY_INPUT() use C++ istreams
 */
/*! \todo YY_INPUT can be improved significantly */
#define YY_INPUT(buf, result, max_size) do {	\
	char c;				\
	*driver.istream >> c;			\
	if (driver.istream->eof()) {		\
		result = YY_NULL;		\
	} else {				\
		buf[0] = c;			\
		result = 1;			\
	}					\
} while (0)
#line 1152 "/home/gurumurt/projects/CoGaDB/Hawk-VLDBJ/source/src/sql/server/sql_scanner.cpp"
/*
 * Options
 */
/* we cannot put all functions into a namespace, so we prefix them */
/*
 * Rules
 */
#line 1160 "/home/gurumurt/projects/CoGaDB/Hawk-VLDBJ/source/src/sql/server/sql_scanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE CoGaDB::SQL::Driver *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 84 "lib/cogadb/src/sql/server/sql_scanner.lpp"


#line 87 "lib/cogadb/src/sql/server/sql_scanner.lpp"
	/* literal keyword tokens */

#line 1438 "/home/gurumurt/projects/CoGaDB/Hawk-VLDBJ/source/src/sql/server/sql_scanner.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yyg->yy_more_len = 0;
		if ( yyg->yy_more_flag )
			{
			yyg->yy_more_len = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			yyg->yy_more_flag = 0;
			}
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 509 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1028 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = yyg->yy_more_len; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 89 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(ADA); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 90 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(ALL); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 91 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(AND); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 92 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{
	yylval->aggregation_function = CoGaDB::AVERAGE;
	TOK(AMMSC);
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 96 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{
	yylval->aggregation_function = CoGaDB::MIN;
	TOK(AMMSC);
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 100 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{
	yylval->aggregation_function = CoGaDB::MAX;
	TOK(AMMSC);
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 104 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{
	yylval->aggregation_function = CoGaDB::SUM;
	TOK(AMMSC);
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 108 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{
	yylval->aggregation_function = CoGaDB::COUNT;
	TOK(AMMSC);
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 112 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{
	yylval->aggregation_function = CoGaDB::AGG_GENOTYPE;
	TOK(AMMSC);
}	
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 116 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{
	yylval->aggregation_function = CoGaDB::AGG_CONCAT_BASES;
	TOK(AMMSC);
}	
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 120 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{
	yylval->aggregation_function = CoGaDB::AGG_IS_HOMOPOLYMER;
	TOK(AMMSC);
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 124 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{
	yylval->aggregation_function = CoGaDB::AGG_GENOTYPE_STATISTICS;
	TOK(AMMSC);
}	
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 128 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(ANY); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 129 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(AS); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 130 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(ASC); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 131 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(AUTHORIZATION); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 132 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(BETWEEN); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 133 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(BIGINT); } 
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 134 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(BY); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 135 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(C); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 136 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(CHARACTER); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 137 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(CHECK); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 138 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(CLOSE); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 139 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(COBOL); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 140 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(COMMIT); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 141 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(CONTINUE); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 142 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(CREATE); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 143 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(CROSS); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 144 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(CURRENT); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 145 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(CURSOR); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 146 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(DATE); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 147 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(DECIMAL); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 148 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(DECLARE); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 149 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(DEFAULT); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 150 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(DELETE); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 151 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(DESC); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 152 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(DISTINCT); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 153 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(DOUBLE); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 154 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(ESCAPE); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 155 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(EXISTS); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 156 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(FETCH); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 157 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(FLOAT); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 158 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(FOR); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 159 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(FOREIGN); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 160 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(FORTRAN); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 161 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(FOUND); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 162 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(FROM); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 163 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(GOTO); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 164 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(GRANT); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 165 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(GROUP); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 166 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(HAVING); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 167 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(IN); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 168 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(INDICATOR); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 169 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(INNER); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 170 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(INSERT); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 171 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(INTEGER); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 172 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(INTO); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 173 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(IS); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 174 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(JOIN); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 175 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(KEY); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 176 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(LANGUAGE); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 177 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(LIKE); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 178 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(LIMIT); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 179 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(MODULE); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 180 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(NOT); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 181 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(NULLX); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 182 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(NUMERIC); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 183 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(OF); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 184 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(ON); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 185 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(OPEN); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 186 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(OPTION); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 187 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(OR); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 188 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(ORDER); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 189 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(PASCAL); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 190 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(PLI); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 191 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(PRECISION); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 192 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(PRIMARY); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 193 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(PRIVILEGES); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 194 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(PROCEDURE); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 195 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(PUBLIC); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 196 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(REAL); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 197 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(REFERENCES); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 198 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(ROLLBACK); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 199 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(SCHEMA); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 200 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(SELECT); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 201 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(SET); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 202 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(SMALLINT); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 203 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(SOME); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 204 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(SQLCODE); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 205 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(TABLE); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 206 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(TO); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 207 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(UNION); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 208 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(UNIQUE); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 209 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(UNSIGNED); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 210 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(UPDATE); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 211 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(USER); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 212 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(VALUES); }
	YY_BREAK
case 98:
#line 214 "lib/cogadb/src/sql/server/sql_scanner.lpp"
case 99:
YY_RULE_SETUP
#line 214 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(VARCHAR); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 215 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(VIEW); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 216 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(WHENEVER); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 217 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(WHERE); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 218 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(WITH); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 219 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{ TOK(WORK); }
	YY_BREAK
/* punctuation */
case 105:
YY_RULE_SETUP
#line 223 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{
	yylval->comparator = ParseTree::EQUAL;
	TOK(COMPARISON);
}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 227 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{
	yylval->comparator = ParseTree::UNEQUAL;
	TOK(COMPARISON);
}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 231 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{
	yylval->comparator = ParseTree::LESSER;
	TOK(COMPARISON);
}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 235 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{
	yylval->comparator = ParseTree::GREATER;
	TOK(COMPARISON);
}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 239 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{
	yylval->comparator = ParseTree::LESSER_EQUAL;
	TOK(COMPARISON);
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 243 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{
	yylval->comparator = ParseTree::GREATER_EQUAL;
	TOK(COMPARISON);
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 248 "lib/cogadb/src/sql/server/sql_scanner.lpp"
return (Parser::token_type)yytext[0];
	YY_BREAK
/* names */
case 112:
YY_RULE_SETUP
#line 252 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{
	yylval->string = new ParseTree::String(yytext);
	boost::algorithm::to_upper(*yylval->string);
	TOK(NAME);
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 258 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{
	yylval->string = new ParseTree::String(yytext + 1, yyleng - 2);
	TOK(NAME);
}
	YY_BREAK
case 114:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 263 "lib/cogadb/src/sql/server/sql_scanner.lpp"
driver.error("Unterminated name");
	YY_BREAK
/* numbers */
case 115:
YY_RULE_SETUP
#line 267 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{
	yylval->integer = new ParseTree::Integer((int)strtol(yytext, NULL, 10));
	TOK(INTNUM);
}
	YY_BREAK
case 116:
#line 272 "lib/cogadb/src/sql/server/sql_scanner.lpp"
case 117:
YY_RULE_SETUP
#line 272 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{
	yylval->integer = new ParseTree::Integer(strtod(yytext, NULL));
	TOK(APPROXNUM);
}
	YY_BREAK
case 118:
#line 278 "lib/cogadb/src/sql/server/sql_scanner.lpp"
case 119:
#line 279 "lib/cogadb/src/sql/server/sql_scanner.lpp"
case 120:
YY_RULE_SETUP
#line 279 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{
	yylval->integer = new ParseTree::Integer(strtod(yytext, NULL));
	TOK(APPROXNUM);
}
	YY_BREAK
/* strings */
case 121:
YY_RULE_SETUP
#line 286 "lib/cogadb/src/sql/server/sql_scanner.lpp"
{
	int c = yyinput(yyscanner);

	if (c != '\'') {
		yylval->string = new ParseTree::String(yytext + 1, yyleng - 2);
		boost::algorithm::replace_all(*yylval->string, "''", "'");

		unput(c);	/* just peeking */
		TOK(STRING);
	} else {
		unput(c);	/* just peeking */
		yymore();
	}
}
	YY_BREAK
case 122:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 301 "lib/cogadb/src/sql/server/sql_scanner.lpp"
driver.error("Unterminated string");
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 303 "lib/cogadb/src/sql/server/sql_scanner.lpp"
;	/* white space */
	YY_BREAK
case 124:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 305 "lib/cogadb/src/sql/server/sql_scanner.lpp"
;	/* comment */
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 307 "lib/cogadb/src/sql/server/sql_scanner.lpp"
ECHO;
	YY_BREAK
#line 2214 "/home/gurumurt/projects/CoGaDB/Hawk-VLDBJ/source/src/sql/server/sql_scanner.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 509 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 509 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 508);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 307 "lib/cogadb/src/sql/server/sql_scanner.lpp"

/*
 * Epilogue
 */

namespace CoGaDB {

void
SQL::Driver::init_scan()
{
	cogadb_sql_scanner_lex_init_extra(this, (yyscan_t *)&scanner);
}

void
SQL::Driver::set_input(std::istream &is)
{
	if (buffer)
		cogadb_sql_scanner__delete_buffer((YY_BUFFER_STATE)buffer, (yyscan_t)scanner);
	buffer = cogadb_sql_scanner__create_buffer(NULL, YY_BUF_SIZE, (yyscan_t)scanner);
	cogadb_sql_scanner__switch_to_buffer((YY_BUFFER_STATE)buffer, (yyscan_t)scanner);

	istream = &is;
}

void
SQL::Driver::set_input(const std::string &src)
{
	if (buffer)
		cogadb_sql_scanner__delete_buffer((YY_BUFFER_STATE)buffer, (yyscan_t)scanner);
	buffer = cogadb_sql_scanner__scan_string(src.c_str(), (yyscan_t)scanner);
}

void
SQL::Driver::destroy_scan()
{
	if (buffer)
		cogadb_sql_scanner__delete_buffer((YY_BUFFER_STATE)buffer, (yyscan_t)scanner);
	cogadb_sql_scanner_lex_destroy((yyscan_t)scanner);
}

void
SQL::Driver::error(const std::string &m)
{
	yyscan_t s = (yyscan_t)scanner;

	std::cerr << cogadb_sql_scanner_get_lineno(s) << ": " << m << std::endl;
}

} /* namespace CoGaDB */
#pragma GCC diagnostic pop

